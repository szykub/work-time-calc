{"version":3,"sources":["assets/Header.js","assets/HourInput.js","assets/HourCalcWrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","HourInput","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleBeginHour","e","setState","beginHour","target","value","handleEndHour","endHour","calculateWorkTime","beginValues","endValues","output","hours","minutes","state","length","split","parseInt","callback","id","Math","floor","concat","workTime","inherits","createClass","key","type","maxLength","onChange","Component","HourCalcWrapper","addHourInput","newInput","Date","now","prevState","hourInputsArr","toConsumableArray","minutesCallback","inputid","forEach","item","calculateAllWorkingHours","allMins","console","log","countedHours","minutesArr","_this2","map","HourInput_HourInput","onClick","App","Header_Header","HourCalcWrapper_HourCalcWrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c55bc080.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\n\r\nexport const Header = () => {\r\n    return(\r\n        <header className=\"header\">\r\n            <span>Work hour calculator</span>\r\n        </header>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport \"./HourInput.css\"\r\n\r\nexport class HourInput extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state={\r\n            beginHour: '',\r\n            endHour: '',\r\n            workTime: '',\r\n        }\r\n    }\r\n\r\n    handleBeginHour = e => {\r\n        this.setState({\r\n            beginHour: e.target.value\r\n        });\r\n    }\r\n\r\n    handleEndHour = e => {\r\n        this.setState({\r\n            endHour: e.target.value\r\n        });\r\n    }\r\n\r\n    calculateWorkTime = () => {\r\n        let beginValues, endValues, output, hours, minutes = 0;\r\n        if(this.state.beginHour.length >= 3 && this.state.endHour.length >= 3){\r\n            beginValues = this.state.beginHour.split(\":\");\r\n            beginValues = ( parseInt(beginValues[0]) * 60 ) + parseInt(beginValues[1])\r\n\r\n            endValues = this.state.endHour.split(\":\");\r\n            endValues = ( parseInt(endValues[0]) * 60 ) + parseInt(endValues[1])\r\n\r\n            output = endValues - beginValues;\r\n            \r\n            this.props.callback(output, this.props.id);\r\n\r\n            hours = Math.floor(output / 60);\r\n            minutes = output % 60;\r\n\r\n            hours = hours < 10 ? '0' + hours : hours;\r\n            minutes = minutes < 10 ? '0' + minutes : minutes;\r\n\r\n            return `${hours}:${minutes}`\r\n        }else return\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"HourInputContainer\">\r\n                <span className=\"gridElement\">{this.props.id}</span>\r\n                <section className=\"InputsContainer gridElement\">\r\n                    <input type=\"text\" maxLength={5} onChange={this.handleBeginHour} value={this.state.beginHour}/>\r\n                </section>\r\n                <section className=\"InputsContainer gridElement\">\r\n                    <input type=\"text\" maxLength={5} onChange={this.handleEndHour} value={this.state.endHour}/>\r\n                </section>\r\n                <span className=\"gridElement\">      \r\n                    {\r\n                        this.calculateWorkTime()\r\n                    }              \r\n                </span>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport \"./HourCalcWrapper.css\";\r\n\r\nimport { HourInput } from \"./HourInput\"\r\n\r\nexport class HourCalcWrapper extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: 1,\r\n            hourInputsArr: [],\r\n            minutesArr: [],\r\n            countedHours: '',\r\n        }\r\n    }\r\n\r\n    addHourInput = () => {\r\n        let newInput = {\r\n            id: this.state.id,\r\n            key: Date.now(),\r\n            minutes: 0,\r\n        }\r\n        this.setState(prevState => ({\r\n            hourInputsArr: [...prevState.hourInputsArr, newInput],\r\n            id: prevState.id + 1,\r\n        }))\r\n    }\r\n\r\n    minutesCallback = (minutes, inputid) => {        \r\n        this.state.hourInputsArr.forEach(item => {\r\n            if(item.id === inputid){\r\n                item.minutes = minutes\r\n            }\r\n        })\r\n    }\r\n\r\n    calculateAllWorkingHours = () => {\r\n        let allMins = 0;\r\n        let hours, minutes = 0;\r\n\r\n        this.state.hourInputsArr.forEach(item => {\r\n            allMins += item.minutes\r\n        })\r\n\r\n        console.log(allMins)\r\n\r\n        hours = Math.floor(allMins / 60);\r\n        minutes = allMins % 60;\r\n\r\n        hours = hours < 10 ? '0' + hours : hours;\r\n        minutes = minutes < 10 ? '0' + minutes : minutes;\r\n\r\n        this.setState({\r\n            countedHours: `${hours}:${minutes}`\r\n        }) \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"container\">\r\n                <section className=\"headerTable\">\r\n                    <span>Lp.</span>\r\n                    <span>Godzina rozpoczęcia</span>\r\n                    <span>Godzina zakończenia</span>\r\n                    <span>Przepracowane</span>\r\n                </section>\r\n                {\r\n                    this.state.hourInputsArr.map(item =>{\r\n                        return <HourInput \r\n                                    key={item.key} \r\n                                    id={item.id}\r\n                                    callback={this.minutesCallback}\r\n                                />\r\n                    })\r\n                }\r\n                <section className=\"addButtonContainer\">\r\n                    <input className=\"addButton\" type=\"button\" value=\"+\" onClick={this.addHourInput}/>\r\n                </section>\r\n                <section className=\"outputTable\">\r\n                    <span>                        \r\n                        W sumie:                        \r\n                    </span>\r\n                    <span>\r\n                        {\r\n                            this.state.countedHours\r\n                        }\r\n                        <input className=\"calculateButton\" type=\"button\" value=\"Oblicz\" onClick={this.calculateAllWorkingHours}/>\r\n                    </span>\r\n                </section>               \r\n\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Header } from './assets/Header'\nimport { HourCalcWrapper } from './assets/HourCalcWrapper'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <HourCalcWrapper />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}